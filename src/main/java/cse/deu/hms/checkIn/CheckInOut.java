/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cse.deu.hms.checkIn;

import cse.deu.hms.reservation.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SAMSUNG
 */
public class CheckInOut extends javax.swing.JFrame {

    private final String paths = System.getProperty("user.dir");  // 프로젝트 루트 경로
    private final File reservationFile = new File(paths + "/src/reservation.txt"); // src폴더에 파일이 있음

    /**
     * Creates new form checkIn
     */
    public CheckInOut() {
        initComponents();
        setLocationRelativeTo(null);
        addExpectedCheckoutDates();
        markMandatoryPayments();
        autoCancelUnsecuredReservations(); // 자동 취소
        loadCheckinList(); // 프로그램 시작 시 체크인 리스트 로드
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkin = new javax.swing.JDialog();
        cancelButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        checkinButton = new javax.swing.JButton();
        changeButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        checkout = new javax.swing.JDialog();
        cancelButton1 = new javax.swing.JButton();
        CO_checkOutButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        useHistory = new javax.swing.JButton();
        checkout_searchButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        feedback_save = new javax.swing.JButton();
        usedetail = new javax.swing.JDialog();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        checkout_OK = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        checkInButton = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();

        cancelButton.setText("취소");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("체크인");

        jLabel3.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("예약 리스트");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "고유번호", "객실번호", "예약자", "전화번호", "금액", "체크인 날짜", "체크아웃 날짜", "결제 유형"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("");
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "이름", "객실번호" }));

        searchButton.setText("검 색");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        checkinButton.setText("체크인");
        checkinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkinButtonActionPerformed(evt);
            }
        });

        changeButton.setText("예약 수정");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("체크인 리스트");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "고유번호", "객실 번호", "예약자", "전화번호", "금액", "결제 유형"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout checkinLayout = new javax.swing.GroupLayout(checkin.getContentPane());
        checkin.getContentPane().setLayout(checkinLayout);
        checkinLayout.setHorizontalGroup(
            checkinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkinLayout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(checkinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(checkinLayout.createSequentialGroup()
                        .addGroup(checkinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkinLayout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(changeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(checkinLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(50, 50, 50)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton)
                                .addGap(0, 151, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        checkinLayout.setVerticalGroup(
            checkinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(checkinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkinButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(changeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        cancelButton1.setText("취소");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });

        CO_checkOutButton.setText("체크아웃");
        CO_checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CO_checkOutButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("피드백");

        useHistory.setText("사용 내역");
        useHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHistoryActionPerformed(evt);
            }
        });

        checkout_searchButton.setText("검 색");
        checkout_searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkout_searchButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("체크아웃");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "이름", "호실" }));

        jLabel6.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("체크인 리스트");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "고유번호", "객실 번호", "예약자", "전화번호", "금액", "결제 유형"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        feedback_save.setText("피드백 저장");
        feedback_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedback_saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout checkoutLayout = new javax.swing.GroupLayout(checkout.getContentPane());
        checkout.getContentPane().setLayout(checkoutLayout);
        checkoutLayout.setHorizontalGroup(
            checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkoutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(checkoutLayout.createSequentialGroup()
                        .addComponent(cancelButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(feedback_save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CO_checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(checkoutLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkout_searchButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextField2)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE))
                .addContainerGap())
        );
        checkoutLayout.setVerticalGroup(
            checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkoutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkout_searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(checkoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CO_checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feedback_save, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel8.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        jLabel8.setText("사용 내역");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "객실 번호", "메뉴", "개수", "예약시간", "식당 / 룸서비스"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton1.setText("확인");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout usedetailLayout = new javax.swing.GroupLayout(usedetail.getContentPane());
        usedetail.getContentPane().setLayout(usedetailLayout);
        usedetailLayout.setHorizontalGroup(
            usedetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usedetailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usedetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(usedetailLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, usedetailLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE))
                .addContainerGap())
        );
        usedetailLayout.setVerticalGroup(
            usedetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usedetailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel9.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel9.setText("체크아웃 확인");

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "객실 번호", "메뉴", "금액", "객실 청구 / 예약"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        jLabel10.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        jLabel10.setText("총 금액");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton2.setText("체크아웃");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("객실 요금");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("사용 금액");

        javax.swing.GroupLayout checkout_OKLayout = new javax.swing.GroupLayout(checkout_OK.getContentPane());
        checkout_OK.getContentPane().setLayout(checkout_OKLayout);
        checkout_OKLayout.setHorizontalGroup(
            checkout_OKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkout_OKLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkout_OKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkout_OKLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addGroup(checkout_OKLayout.createSequentialGroup()
                        .addGroup(checkout_OKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, checkout_OKLayout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        checkout_OKLayout.setVerticalGroup(
            checkout_OKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkout_OKLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(checkout_OKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(checkout_OKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jTextField4)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("뒤로가기");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("체크인 / 체크아웃");

        checkInButton.setText("체크인");
        checkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInButtonActionPerformed(evt);
            }
        });

        checkOutButton.setText("체크아웃");
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(checkInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(backButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void checkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInButtonActionPerformed
        // TODO add your handling code here:
        checkin.setSize(1000, 600); // 너비 1000, 높이 600으로 설정
        checkin.setResizable(false); // 크기 변경 불가능하도록 설정 (선택 사항)
        checkin.setLocationRelativeTo(this);// 다이얼로그를 화면 중앙에 위치
        checkin.setVisible(true);// 다이얼로그 표시

        CheckInFile checkInFile = new CheckInFile();

        try {
            List<CheckInConstru> reservations = checkInFile.loadReservations();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // 기존 데이터 초기화

            for (CheckInConstru reservation : reservations) {
                // 객체의 데이터를 테이블 행으로 변환
                String[] tableRow = {
                    reservation.getUniqueId(),
                    reservation.getRoomNumber(),
                    reservation.getGuestName(),
                    reservation.getPhoneNumber(),
                    reservation.getPrice(),
                    reservation.getCheckInDate(),
                    reservation.getCheckOutDate(),
                    reservation.getPaymentType()
                };
                model.addRow(tableRow);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "파일을 읽는 중 오류가 발생");
        }

    }//GEN-LAST:event_checkInButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        // 기본 프레임에서 체크인과 체크아웃 버튼중에 체크인을 눌렀을 때 나오는 프레임
        checkout.setSize(710, 490); // 너비 1000, 높이 600으로 설정
        checkout.setResizable(false); // 크기 변경 불가능하도록 설정 (선택 사항)
        checkout.setLocationRelativeTo(this);// 다이얼로그를 화면 중앙에 위치
        initializeCheckoutTable();
        loadCheckinList();
        checkout.setVisible(true);// 다이얼로그 표시
    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        checkin.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        // TODO add your handling code here:
        checkout.dispose();
    }//GEN-LAST:event_cancelButton1ActionPerformed

    private void CO_checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CO_checkOutButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable4.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "체크아웃할 객실을 선택하세요.");
            return;
        }

        String roomNumber = (String) jTable4.getValueAt(selectedRow, 1);
        CheckInFile checkInFile = new CheckInFile();

        try {
            // 체크인 데이터 가져오기
            CheckInConstru checkInData = checkInFile.getCheckInData(roomNumber);
            if (checkInData == null) {
                JOptionPane.showMessageDialog(this, "체크아웃 데이터를 찾을 수 없습니다.");
                return;
            }

            // 체크아웃 시간 계산
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            Date checkOutLimitTime = dateFormat.parse(checkInData.getCheckOutDate() + " 11:00");
            Date currentDate = Calendar.getInstance().getTime();

            // 객실 요금 및 추가 요금 계산
            int roomCharge = getRoomPrice(roomNumber);
            boolean additionalCharge = false;
            if (currentDate.after(checkOutLimitTime)) {
                roomCharge += getRoomPrice(roomNumber); // 추가 요금
                additionalCharge = true;
            }

            // 사용 내역 비용 계산
            int usageCharge = checkInFile.calculateUsageCharge(roomNumber);

            // 총 금액 계산
            int totalAmount = roomCharge + usageCharge;

            // UI 업데이트
            jTextField5.setText(String.valueOf(roomCharge)); // 객실 요금
            jTextField6.setText(String.valueOf(usageCharge)); // 사용 요금
            jTextField4.setText(String.valueOf(totalAmount)); // 총 금액

            if (additionalCharge) {
                JOptionPane.showMessageDialog(this, "오전 11시 이후 체크아웃으로 인해 1박 요금이 추가 부과되었습니다.");
            }

            // 체크아웃 상세 데이터 로드
            loadCheckoutDetails(roomNumber);

            // 체크아웃 확인 창 표시
            checkout_OK.setSize(460, 350);
            checkout_OK.setResizable(false);
            checkout_OK.setLocationRelativeTo(this);
            checkout_OK.setVisible(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "체크아웃 처리 중 오류 발생: " + e.getMessage());
        }
    }//GEN-LAST:event_CO_checkOutButtonActionPerformed


    private void useHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHistoryActionPerformed
        // TODO add your handling code here:
        usedetail.setSize(710, 400); // 너비 710, 높이 380으로 설정
        usedetail.setResizable(false); // 크기 변경 불가능하도록 설정 (선택 사항)
        usedetail.setLocationRelativeTo(this);// 다이얼로그를 화면 중앙에 위치
        usedetail.setVisible(true);// 다이얼로그 표시

        int selectedRow = jTable4.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "사용 내역을 확인할 행을 선택해주세요.");
            return;
        }

        // 선택된 객실 번호 가져오기
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        String roomNumber = (String) model.getValueAt(selectedRow, 1); // 객실 번호

        // 사용 내역 테이블 초기화
        DefaultTableModel detailTableModel = (DefaultTableModel) jTable2.getModel();
        detailTableModel.setRowCount(0);

        // CheckInFile 객체 생성
        CheckInFile checkInFile = new CheckInFile();

        try {
            // 메뉴 사용 내역 로드
            List<String[]> menuUsage = checkInFile.loadMenuUsage(roomNumber);

            // 테이블에 데이터 추가
            for (String[] usage : menuUsage) {
                String menu = usage[1];                // 메뉴 이름
                int quantity = Integer.parseInt(usage[3]); // 개수
                String reservationTime = usage[4];    // 예약 시간
                String serviceType = usage[5];        // 식당/룸서비스 구분

                detailTableModel.addRow(new Object[]{roomNumber, menu, quantity, reservationTime, serviceType});
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "사용 내역을 로드하는 중 오류가 발생했습니다: " + e.getMessage());
        }
    }//GEN-LAST:event_useHistoryActionPerformed


    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String keyword = jTextField1.getText().trim(); // 검색어
        String searchCategory = (String) jComboBox1.getSelectedItem(); // 검색 기준 ("이름" 또는 "객실번호")

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // 기존 테이블 데이터 초기화

        CheckInFile checkInFile = new CheckInFile();

        try {
            // 검색 결과 로드
            List<CheckInConstru> searchResults = checkInFile.searchReservations(keyword, searchCategory);

            // 검색 결과를 테이블에 추가
            for (CheckInConstru reservation : searchResults) {
                model.addRow(new Object[]{
                    reservation.getUniqueId(),
                    reservation.getRoomNumber(),
                    reservation.getGuestName(),
                    reservation.getPhoneNumber(),
                    reservation.getPrice(),
                    reservation.getCheckInDate(),
                    reservation.getCheckOutDate(),
                    reservation.getPaymentType()
                });
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "검색 중 오류가 발생");
        }
    }//GEN-LAST:event_searchButtonActionPerformed


    private void checkinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkinButtonActionPerformed
        // 체크인 프레임 안에서의 체크인 버튼
        int selectedRow = jTable1.getSelectedRow(); // 예약 리스트에서 선택된 행 가져오기

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "체크인할 행을 선택하십시오.");
            return; // 선택된 행이 없으면 경고 메시지 출력
        }

        // 예약 리스트와 체크인 리스트의 테이블 모델 가져오기
        DefaultTableModel reservationModel = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel checkinModel = (DefaultTableModel) jTable3.getModel();

        // 선택된 행의 데이터 가져오기
        String[] selectedData = new String[reservationModel.getColumnCount()];
        for (int i = 0; i < reservationModel.getColumnCount(); i++) {
            selectedData[i] = (String) reservationModel.getValueAt(selectedRow, i);
        }

        // 파일에 저장할 데이터 (모든 열 포함)
        String fullData = String.join("\t", selectedData);

        // 테이블에 표시할 데이터 (필요한 6개 열만 추출)
        String[] tableData = {
            selectedData[0], // 고유번호
            selectedData[1], // 객실 번호
            selectedData[2], // 예약자
            selectedData[3], // 전화번호
            selectedData[4], // 금액
            selectedData[7] // 결제 유형
        };

        // 체크인 리스트 테이블에 추가
        checkinModel.addRow(tableData);

        // 예약 리스트에서 선택된 행 제거
        reservationModel.removeRow(selectedRow);

        // 파일 업데이트
        try {
            // 1. reservation.txt에서 체크인된 데이터 삭제
            List<String> remainingReservations = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(new FileReader(reservationFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (!line.split("\t")[0].equals(selectedData[0])) { // 고유번호 비교
                        remainingReservations.add(line);
                    }
                }
            }

            // reservation.txt 업데이트
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(reservationFile))) {
                for (String reservation : remainingReservations) {
                    writer.write(reservation);
                    writer.newLine();
                }
            }

            // 2. checkIn_list.txt에 체크인된 데이터 추가
            File checkInFile = new File(paths + "/src/checkIn_list.txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(checkInFile, true))) { // true로 설정해서 덧붙이기
                writer.write(fullData); // 모든 데이터를 저장
                writer.newLine();
            }

            JOptionPane.showMessageDialog(this, "체크인 완료.");
        } catch (IOException e) {
        }
    }//GEN-LAST:event_checkinButtonActionPerformed

    public void loadCheckinList() {
        DefaultTableModel checkinModel = (DefaultTableModel) jTable4.getModel();
        checkinModel.setRowCount(0); // 기존 데이터 초기화

        try {
            // 데이터 로드 (CheckInFile 클래스를 통해 로드)
            CheckInFile checkInFile = new CheckInFile();
            List<CheckInConstru> checkInList = checkInFile.loadCheckInList();

            // UI 테이블에 데이터 추가
            for (CheckInConstru checkIn : checkInList) {
                String[] tableRow = {
                    checkIn.getUniqueId(), // 고유번호
                    checkIn.getRoomNumber(), // 객실 번호
                    checkIn.getGuestName(), // 예약자
                    checkIn.getPhoneNumber(), // 전화번호
                    checkIn.getPrice(), // 금액
                    checkIn.getPaymentType() // 결제 유형
                };
                checkinModel.addRow(tableRow);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "체크인 리스트를 불러오는 중 오류가 발생했습니다: " + e.getMessage());
        }
    }

    public void initializeCheckoutTable() {
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"고유번호", "객실 번호", "예약자", "전화번호", "금액", "결제 유형"}
        ));
    }

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // TODO add your handling code here:
        try {
            // ReservationManagement 클래스 인스턴스 생성 및 열기
            ReservationManagement rm = new ReservationManagement();

            // 체크인 프레임의 부모로 예약 수정 창을 설정
            rm.setLocationRelativeTo(this);

            
            // 예약 수정 창 표시
            rm.setVisible(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "예약 수정 화면을 여는 데 실패");
        }
    }//GEN-LAST:event_changeButtonActionPerformed

    public void refreshReservationList() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // 기존 데이터 초기화

        try {
            // CheckInFile 클래스 사용
            CheckInFile checkInFile = new CheckInFile();
            List<CheckInConstru> reservations = checkInFile.loadReservations();

            // 테이블에 데이터 추가
            for (CheckInConstru reservation : reservations) {
                model.addRow(new Object[]{
                    reservation.getUniqueId(),
                    reservation.getRoomNumber(),
                    reservation.getGuestName(),
                    reservation.getPhoneNumber(),
                    reservation.getPrice(),
                    reservation.getCheckInDate(),
                    reservation.getCheckOutDate(),
                    reservation.getPaymentType()
                });
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "데이터 새로고침 중 오류 발생: " + e.getMessage());
        }
    }


    private void feedback_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedback_saveActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable4.getSelectedRow(); // jTable5는 체크인 리스트 테이블

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "행을 선택해주세요.");
            return;
        }

        // 선택된 행의 데이터를 가져오기
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        String roomNumber = (String) model.getValueAt(selectedRow, 1); // 객실 번호

        // 피드백 입력 텍스트 가져오기
        String feedback = jTextField2.getText().trim(); // jTextArea1은 피드백 입력창

        if (feedback.isEmpty()) {
            JOptionPane.showMessageDialog(this, "피드백을 입력해주세요.");
            return;
        }

        // 피드백 데이터 저장 형식 지정
        String feedbackData = String.format("%s\t%s%n", roomNumber, feedback);

        // 피드백 파일 경로 지정 (AppConstants 사용)
        String feedbackFilePath = AppConstants.feedbackFile;

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(feedbackFilePath, true))) {
            writer.write(feedbackData);
            JOptionPane.showMessageDialog(this, "피드백이 저장되었습니다.");

            // 피드백 입력창 초기화
            jTextField2.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "피드백 저장 중 오류가 발생했습니다: " + e.getMessage());
        }
    }//GEN-LAST:event_feedback_saveActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        usedetail.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable4.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "체크아웃할 객실을 선택하세요.");
            return;
        }

        // 선택된 객실 번호 가져오기
        DefaultTableModel checkinModel = (DefaultTableModel) jTable4.getModel();
        String roomNumber = (String) checkinModel.getValueAt(selectedRow, 1); // 객실 번호

        // 체크아웃 완료 메시지
        String totalAmount = jTextField4.getText();
        JOptionPane.showMessageDialog(this, "총 금액: " + totalAmount + "원\n체크아웃이 완료되었습니다.");

        // 파일 경로 정의
        String checkInFilePath = AppConstants.checkinFile;
        String checkOutFilePath = AppConstants.checkoutFile;

        List<String> updatedCheckInList = new ArrayList<>();
        String checkOutEntry = null;

        // 체크인 리스트에서 선택된 데이터 삭제 및 체크아웃 리스트로 이동
        try (BufferedReader reader = new BufferedReader(new FileReader(checkInFilePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split("\t");
                if (data.length > 1 && data[1].equals(roomNumber)) {
                    checkOutEntry = line; // 체크아웃 파일로 이동할 데이터 저장
                } else {
                    updatedCheckInList.add(line); // 유지할 데이터 저장
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "체크인 리스트 읽기 중 오류 발생: " + e.getMessage());
            return;
        }

        // 체크아웃 리스트 파일에 데이터 추가
        if (checkOutEntry != null) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(checkOutFilePath, true))) {
                writer.write(checkOutEntry);
                writer.newLine();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "체크아웃 데이터 저장 중 오류 발생: " + e.getMessage());
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "체크아웃할 데이터를 찾을 수 없습니다.");
            return;
        }

        // 체크인 리스트 파일 업데이트 (선택된 데이터 삭제 후 저장)
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(checkInFilePath))) {
            for (String updatedLine : updatedCheckInList) {
                writer.write(updatedLine);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "체크인 리스트 저장 중 오류 발생: " + e.getMessage());
            return;
        }

        // UI에서 체크인 리스트 테이블 업데이트
        checkinModel.removeRow(selectedRow); // 선택된 행 제거

        // 체크아웃 다이얼로그 닫기
        checkout_OK.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void checkout_searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkout_searchButtonActionPerformed
        // TODO add your handling code here:
        String keyword = jTextField3.getText().trim(); // 검색어 입력 필드
        String searchCategory = (String) jComboBox2.getSelectedItem(); // 검색 기준 ("이름" 또는 "객실 번호")

        // 테이블 모델 가져오기 및 초기화
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0); // 기존 데이터를 초기화

        File checkInFile = new File(paths + "/src/checkIn_list.txt");

        // 파일에서 데이터 읽기
        if (checkInFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(checkInFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split("\t"); // 데이터를 탭으로 구분
                    if (data.length >= 6) {
                        boolean matches = false;

                        // 검색 기준에 따라 필터링
                        if (keyword.isEmpty()) {
                            matches = true; // 검색어가 없으면 모든 데이터 추가
                        } else if ("이름".equals(searchCategory)) {
                            matches = data[2].contains(keyword); // 예약자 이름 검색
                        } else if ("객실 번호".equals(searchCategory)) {
                            matches = data[1].equals(keyword); // 객실 번호 검색
                        }

                        // 조건에 맞는 데이터를 테이블에 추가
                        if (matches) {
                            model.addRow(new Object[]{data[0], data[1], data[2], data[3], data[4], data[5]});
                        }
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "파일을 읽는 중 오류가 발생했습니다: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "checkIn_list.txt 파일이 존재하지 않습니다.");
        }
    }//GEN-LAST:event_checkout_searchButtonActionPerformed

    public int getRoomPrice(String roomNumber) {
        // roomNumber에서 층 정보 추출 (예: "101" → "1층")
        if (roomNumber == null || roomNumber.isEmpty()) {
            JOptionPane.showMessageDialog(this, "객실 번호가 유효하지 않습니다.");
            return 1; // 기본값
        }

        String floor;
        if (roomNumber.length() == 3) { // 예: 101, 202
            floor = roomNumber.substring(0, 1) + "층";
        } else if (roomNumber.length() == 4) { // 예: 1001, 1101
            floor = roomNumber.substring(0, 2) + "층";
        } else {
            JOptionPane.showMessageDialog(this, "객실 번호 형식이 올바르지 않습니다.");
            return 1; // 기본값
        }

        String roomPriceFilePath = paths + "/src/roomPrice.txt";

        try {
            CheckInFile checkInFile = new CheckInFile(); // CheckInFile 클래스의 인스턴스 생성
            List<String[]> roomPrices = checkInFile.loadRoomPrices(); // AppConstants.roompriceFile 사용

            for (String[] data : roomPrices) {
                if (data.length == 2 && data[0].equals(floor)) {
                    return Integer.parseInt(data[1].trim()); // 해당 층의 요금 반환
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "객실 요금을 불러오는 중 오류 발생: " + e.getMessage());
        }
        return 1; // 기본 요금 반환
    }

    public void autoCancelUnsecuredReservations() {
        try {
            List<String> remainingReservations = new ArrayList<>();
            List<String> cancelledReservations = new ArrayList<>();

            // 현재 날짜 및 시간 가져오기
            Date now = new Date();
            SimpleDateFormat dateOnlyFormat = new SimpleDateFormat("yyyy-MM-dd");
            String currentDate = dateOnlyFormat.format(now);

            Calendar calendar = Calendar.getInstance();
            calendar.setTime(now);
            int currentHour = calendar.get(Calendar.HOUR_OF_DAY); // 24시간 형식의 현재 시간

            // reservation.txt 파일 읽기
            try (BufferedReader reader = new BufferedReader(new FileReader(reservationFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split("\t"); // 예약 데이터 분리

                    if (data.length >= 9) { // 데이터 길이 확인
                        String checkInDate = data[6]; // 체크인 날짜
                        String paymentType = data[8]; // 결제 유형 (현금 또는 신용카드)

                        // 조건 확인: 체크인 날짜가 오늘이고, 18시 이후이고, 결제 유형이 현금인 경우
                        if (currentDate.equals(checkInDate) && currentHour >= 18 && "현금".equals(paymentType)) {
                            cancelledReservations.add(line); // 취소 예약 리스트에 추가
                        } else {
                            remainingReservations.add(line); // 유지할 예약 리스트에 추가
                        }
                    }
                }
            }

            // remainingReservations을 reservation.txt에 다시 작성
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(reservationFile))) {
                for (String reservation : remainingReservations) {
                    writer.write(reservation);
                    writer.newLine();
                }
            }

            // 취소된 예약을 알림창으로 표시
            if (!cancelledReservations.isEmpty()) {
                JOptionPane.showMessageDialog(this, "취소된 예약이 있습니다.");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "파일 오류");
        }
    }

    public void addExpectedCheckoutDates() {
        List<String> updatedReservations = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(reservationFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split("\t");
                if (data.length >= 8) {
                    String checkInDate = data[6]; // 체크인 날짜
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                    // 체크아웃 날짜 계산 (체크인 날짜 + 1일)
                    Date checkIn = dateFormat.parse(checkInDate);
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(checkIn);
                    calendar.add(Calendar.DATE, 1); // 1일 추가

                    // 예상 체크아웃 날짜
                    String expectedCheckoutDate = dateFormat.format(calendar.getTime());

                    // 기존 예약 데이터에 체크아웃 날짜 추가
                    if (data.length == 8) {
                        data[7] = expectedCheckoutDate; // 체크아웃 날짜 저장
                    }

                    updatedReservations.add(String.join("\t", data));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "체크아웃 날짜 오류");
        }

        // 업데이트된 데이터를 reservation.txt에 저장
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(reservationFile))) {
            for (String reservation : updatedReservations) {
                writer.write(reservation);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "파일 저장 오류");
        }
    }

    public void markMandatoryPayments() {
        try {
            List<String> updatedReservations = new ArrayList<>();

            // 현재 날짜와 시간
            Date now = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String today = dateFormat.format(now);

            Calendar calendar = Calendar.getInstance();
            int currentHour = calendar.get(Calendar.HOUR_OF_DAY); // 현재 시간 (24시간 형식)

            try (BufferedReader reader = new BufferedReader(new FileReader(reservationFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split("\t");

                    // 배열 크기 확인
                    if (data.length >= 9) { // 최소 9개의 데이터가 있어야 함
                        String checkInDate = data[6]; // 체크인 날짜
                        String paymentType = data[8]; // 결제 유형

                        // 체크인 날짜가 오늘이고, 오후 6시 이후일 경우
                        if (today.equals(checkInDate) && currentHour >= 18 && "현금".equals(paymentType)) {
                            // "반드시 지불해야 함" 상태 추가
                            if (data.length == 9) {
                                data = Arrays.copyOf(data, 10); // 배열 크기 확장
                            }
                            data[9] = "지불 해야함.";
                        }
                        updatedReservations.add(String.join("\t", data));
                    } else {
                        // 데이터가 불완전한 경우 경고 출력 (옵션)
                        System.err.println("오류 발생");
                    }
                }
            }

            // 업데이트된 데이터를 reservation.txt에 다시 저장
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(reservationFile))) {
                for (String updatedLine : updatedReservations) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
            }

            // UI 갱신 (필요 시 테이블도 업데이트)
            refreshReservationList();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "파일 처리 중 오류 발생: " + e.getMessage());
        }
    }

    public void loadCheckoutDetails(String roomNumber) {
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        model.setRowCount(0);

        CheckInFile checkInFile = new CheckInFile();

        try {
            List<String[]> menuUsage = checkInFile.loadMenuUsage(roomNumber);
            for (String[] usage : menuUsage) {
                model.addRow(new Object[]{
                    roomNumber, usage[1], usage[3], usage[5]
                });
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "체크아웃 상세 데이터 로드 중 오류 발생: " + e.getMessage());
        }

        // 테이블 갱신
        jTable5.revalidate();
        jTable5.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckInOut().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CO_checkOutButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelButton1;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton checkInButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JDialog checkin;
    private javax.swing.JButton checkinButton;
    private javax.swing.JDialog checkout;
    private javax.swing.JDialog checkout_OK;
    private javax.swing.JButton checkout_searchButton;
    private javax.swing.JButton feedback_save;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton useHistory;
    private javax.swing.JDialog usedetail;
    // End of variables declaration//GEN-END:variables
}
